//===============================================
// sketch data populator - library
//===============================================

var Library = {};
(function(self) {

  //json stuff
  self.getJSONFromURL = getJSONFromURL;
  self.getImageFromURL = getImageFromURL;
  self.stringify = stringify;

  //layers
  self.jsArray = jsArray;
  self.getSelectedLayers = getSelectedLayers;
  self.isSymbolInstance = isSymbolInstance;
  self.findLayersInLayer = findLayersInLayer;
  self.isLayerGroup = isLayerGroup;
  self.isLayerShapeGroup = isLayerShapeGroup;

  //ui elements
  self.createAlert = createAlert;
  self.createSearchView = createSearchView;
  self.createDocumentMessage = createDocumentMessage;
  self.createSearchAlert = createSearchAlert;

  //generation
  self.getImagesAndPopulate = getImagesAndPopulate;
  self.generate = generate;

  // ==============================================
  // ++++++++++++++++++++++++++++++++++++++++++++++
  // ==============================================
  // JSON
  // ==============================================
  // ++++++++++++++++++++++++++++++++++++++++++++++
  // ==============================================

  function getJSONFromURL(url) {
    var request     = [NSURLRequest requestWithURL:[NSURL URLWithString:url]],
        response    = [NSURLConnection sendSynchronousRequest:request returningResponse:nil error:nil],
        responseObj = [NSJSONSerialization JSONObjectWithData:response options:nil error:nil];
    return responseObj;
  }

  function getImageFromURL(urlString) {
    //get data from url
    var url = NSURL.URLWithString(urlString);
    var data = [url resourceDataUsingCache:false];
    if(!data) return;

    //create image from data
    var image = [[NSImage alloc] initWithData:data];
    return image;
  }

  function stringify(obj, prettyPrinted) {
    var prettySetting = prettyPrinted ? NSJSONWritingPrettyPrinted : 0,
    jsonData = [NSJSONSerialization dataWithJSONObject:obj options:prettySetting error:nil];
    return [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
  }

  // ==============================================
  // ++++++++++++++++++++++++++++++++++++++++++++++
  // ==============================================
  // LAYERS
  // ==============================================
  // ++++++++++++++++++++++++++++++++++++++++++++++
  // ==============================================

  function jsArray(array) {
    var length = [array count];
    var jsArray = [];

    while (length--) {
      jsArray.push([array objectAtIndex: length]);
    }
    return jsArray;
  }

  function getSelectedLayers() {
    var selectedLayers = [];
    if(context.selection.count() > 0) {
      selectedLayers = jsArray(context.selection);
    }
    return selectedLayers;
  }

  function findLayersInLayer(name, exactMatch, type, rootLayer, subLayersOnly, layersToExclude) {

    //create predicate format
    var formatRules = ['(name != NULL)'];
    var arguments = [];

    //name
    if(name) {
      if(exactMatch) {
        formatRules.push('(name == %@)');
      }
      else {
        formatRules.push('(name like %@)');
      }
      arguments.push(name);
    }

    //type
    if(type) {
      formatRules.push('(className == %@)');
      arguments.push(type);
    }
    else {
      formatRules.push('(className == "MSLayerGroup" OR className == "MSShapeGroup" OR className == "MSArtboardGroup" OR className == "MSTextLayer")');
    }

    //layers to exclude
    if(layersToExclude) {
      formatRules.push('NOT (SELF IN %@)');
      arguments.push(layersToExclude);
    }

    //prepare format string
    var formatString = formatRules.join(' AND ');

    //create predicate
    predicate = [NSPredicate predicateWithFormat: formatString argumentArray: arguments];

    //get layers to filter
    var layers;
    if (subLayersOnly) {
      layers = [[rootLayer layers] array];
    } else {
      layers = [rootLayer children];
    }

    //perform query
    var queryResult = [layers filteredArrayUsingPredicate: predicate];

    //return result as js array
    return jsArray(queryResult);
  }

  function isSymbolInstance(layer) {
    return ([layer isKindOfClass: [MSSymbolInstance class]]);
  }

  function isLayerGroup(layer) {
    return ([layer isKindOfClass: [MSLayerGroup class]] && ![layer isKindOfClass: [MSShapeGroup class]]);
  }

  function isLayerShapeGroup(layer) {
    return ([layer isKindOfClass: [MSShapeGroup class]]);
  }

  // ==============================================
  // ++++++++++++++++++++++++++++++++++++++++++++++
  // ==============================================
  // UI ELEMENTS
  // ==============================================
  // ++++++++++++++++++++++++++++++++++++++++++++++
  // ==============================================

  function createDocumentMessage(message) {
    context.document.showMessage(String(message));
  }

  function createAlert(title, message, iconFileName) {
    var alert = [COSAlertWindow new];
    [alert setMessageText: title];
    [alert setInformativeText: message];

    if(iconFileName) {

      //get icon path
      var scriptPath = [NSString stringWithString: context.scriptPath];
      scriptPath = [scriptPath stringByDeletingLastPathComponent];
      var iconPath = [scriptPath stringByAppendingPathComponent: iconFileName];

      //set icon
      var icon = [[NSImage alloc] initByReferencingFile: iconPath];
      [alert setIcon: icon];
    }

    return alert;
  }

  function createSearchView() {
    //create search view and text field
    var searchView = [[NSView alloc] initWithFrame: NSMakeRect(0, 0, 300, 22)];
    var searchTextField = [[NSTextField alloc] initWithFrame:NSMakeRect(0, 0, 300, 22)];

    //add text field to search view
    [searchView addSubview: searchTextField];

    return {
      view: searchView,
      searchTextField: searchTextField
    };
  }

  function createSearchAlert(title, message, iconFileName) {
    // alert provided in plugin
    var alert = createAlert(title, message, iconFileName);

    //create search view
    var searchView = createSearchView();
    var searchField = searchView.searchTextField;

    //create spacer view
    var spacerView = [[NSView alloc] initWithFrame: NSMakeRect(0, 0, 300, 5)];

    //add search view
    [alert addAccessoryView: searchView.view];

    //add spacer view
    [alert addAccessoryView: spacerView];

    //add bottom buttons
    [alert addButtonWithTitle:"Populate"];
    [alert addButtonWithTitle:"Cancel"];

    var responseCode = [alert runModal];

    if(responseCode == '1000') {
      //get search value
      var searchValue = [searchField stringValue];
      //formate search value for api
      return searchValue.replace(/\s/g, "%20");
    }
  }

  // ==============================================
  // ++++++++++++++++++++++++++++++++++++++++++++++
  // ==============================================
  // GENERATION
  // ==============================================
  // ++++++++++++++++++++++++++++++++++++++++++++++
  // ==============================================

  function getImagesAndPopulate(layers, apiParams, imgParams) {
    //get data from api
    var twitchJSON = TwitchApi.getTwitchJSON(apiParams.apiPresetName, apiParams.apiPresetSearch);
    //format data from api
    var formattedData = Service.pullImagesFromJSON(twitchJSON, imgParams);
    //populate
    populate(formattedData, layers);
  }

  function generate(layers, apiParams, imgParams) {
    if (apiParams.apiPresetSearch !== null && apiParams.apiPresetSearch.length === 0) {
      createDocumentMessage("You didn't search for anything!");
      return;
    }

    getImagesAndPopulate(layers, apiParams, imgParams);
  }

})(Library);
